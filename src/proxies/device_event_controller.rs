//! # DBus interface proxy for: `org.a11y.atspi.DeviceEventController`
//!
//! This code was generated by `zbus-xmlgen` `2.0.1` from DBus introspection data.
//! Source: `DeviceEventController.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!

use zbus::dbus_proxy;

#[dbus_proxy(interface = "org.a11y.atspi.DeviceEventController")]
trait DeviceEventController {
    /// DeregisterDeviceEventListener method
    fn deregister_device_event_listener(
        &self,
        listener: &zbus::zvariant::ObjectPath<'_>,
        types: u32,
    ) -> zbus::Result<()>;

    /// DeregisterKeystrokeListener method
    fn deregister_keystroke_listener(
        &self,
        listener: &zbus::zvariant::ObjectPath<'_>,
        keys: &[(i32, i32, &str, i32)],
        mask: u32,
        type_: u32,
    ) -> zbus::Result<()>;

    /// GenerateKeyboardEvent method
    fn generate_keyboard_event(
        &self,
        keycode: i32,
        keystring: &str,
        type_: u32,
    ) -> zbus::Result<()>;

    /// GenerateMouseEvent method
    fn generate_mouse_event(&self, x: i32, y: i32, eventName: &str) -> zbus::Result<()>;

    /// NotifyListenersAsync method
    fn notify_listeners_async(
        &self,
        event: &(u32, i32, u32, u32, i32, &str, bool),
    ) -> zbus::Result<()>;

    /// NotifyListenersSync method
    fn notify_listeners_sync(
        &self,
        event: &(u32, i32, u32, u32, i32, &str, bool),
    ) -> zbus::Result<bool>;

    /// RegisterDeviceEventListener method
    fn register_device_event_listener(
        &self,
        listener: &zbus::zvariant::ObjectPath<'_>,
        types: u32,
    ) -> zbus::Result<bool>;

    /// RegisterKeystrokeListener method
    fn register_keystroke_listener(
        &self,
        listener: &zbus::zvariant::ObjectPath<'_>,
        keys: &[(i32, i32, &str, i32)],
        mask: u32,
        type_: &[u32],
        mode: &(bool, bool, bool),
    ) -> zbus::Result<bool>;
}
