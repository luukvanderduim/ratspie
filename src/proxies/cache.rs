//! # DBus interface proxy for: `org.a11y.atspi.Cache`
//!
//! This code was generated by `zbus-xmlgen` `2.0.1` from DBus introspection data.
//! Source: `Cache.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!

use zbus::dbus_proxy;

#[dbus_proxy(interface = "org.a11y.atspi.Cache")]
trait Cache {
    /// GetItems method
    fn get_items(&self) -> zbus::Result<Vec<(String, zbus::zvariant::OwnedObjectPath)>>;

    /// AddAccessible signal
    #[dbus_proxy(signal)]
    fn add_accessible(&self, nodeAdded: (&str, zbus::zvariant::ObjectPath<'_>))
        -> zbus::Result<()>;

    /// RemoveAccessible signal
    #[dbus_proxy(signal)]
    fn remove_accessible(
        &self,
        nodeRemoved: (&str, zbus::zvariant::ObjectPath<'_>),
    ) -> zbus::Result<()>;
}
